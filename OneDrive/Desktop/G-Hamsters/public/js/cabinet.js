import { RegisterUser } from "./mainPage.js";
import { Notification } from "./mainPage.js";
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-app.js";

import {
  getAuth,
  reauthenticateWithCredential,
  updatePassword,
  EmailAuthProvider,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js";
import {
  collection,
  getDocs,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";
import { auth, db } from "./firebase-config.js";

const error_text = document.getElementById("error-text");
const error_text_main = document.getElementById("error_text_main");
let myProgress = 25; // –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
const barData = []; // –ü—Ä–æ–≥—Ä–µ—Å –∑–∞ –º–æ–¥—É–ª—è–º–∏ (0‚Äì100)
let lineData = []; // –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å/–º—ñ—Å—è—Ü—å (0‚Äì50)

const formUser = {
  name: document.getElementById("name"),
  surname: document.getElementById("surname"),
  phone: document.getElementById("phone"),
};

window.checkUserName = function (elem) {
  let errors = [];
  const regexp =
    /^(?!–¨)[–ê-–©–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]*(?:'[–∞-—â—å—é—è—ñ—ó—î“ë]+)?[–∞-—â—å—é—è—ñ—ó—î“ë]*(?:-[–ê-–©–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]*(?:'[–∞-—â—å—é—è—ñ—ó—î“ë]+)?[–∞-—â—å—é—è—ñ—ó—î“ë]*)*$/;

  if (!regexp.test(elem.value)) {
    elem.style.borderColor = "red";
    errors.push("–Ü–º‚Äô—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏.");
  }

  const parts = elem.value.split("-");
  console.log(elem);
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];

    if (/[a-zA-Z]/.test(elem.value)) {
      elem.style.borderColor = "red";
      error_text.textContent = "–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏.";
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (3 —Å–∏–º–≤–æ–ª–∏)
    if (part.replace(/'/g, "").length < 3) {
      error_text.textContent = `–ß–∞—Å—Ç–∏–Ω–∞ "${part}" –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 –±—É–∫–≤–∏.`;
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ—ó –ª—ñ—Ç–µ—Ä–∏
    if (!/^[–ê-–©–Æ–Ø–Ü–á–Ñ“ê]/.test(part)) {
      error_text.textContent = `–ß–∞—Å—Ç–∏–Ω–∞ "${part}" –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏.`;
      return false;
    }

    // –ù–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è —á–∏ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
    if (/^'/.test(part) || /'$/.test(part)) {
      error_text.textContent = `–£ —á–∞—Å—Ç–∏–Ω—ñ "${part}" –∞–ø–æ—Å—Ç—Ä–æ—Ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–±–æ –≤ –∫—ñ–Ω—Ü—ñ.`;
      return false;
    }

    // –ê–ø–æ—Å—Ç—Ä–æ—Ñ –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –ø–µ—Ä–µ–¥ –º–∞–ª–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é
    const apostrophes = [...part.matchAll(/'/g)];
    for (const match of apostrophes) {
      const pos = match.index;
      if (pos === 0 || pos === part.length - 1) continue; // –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏
      const before = part[pos - 1];
      const after = part[pos + 1];
      if (!/[–∞-—â—å—é—è—ñ—ó—î“ë]/.test(before) || !/[–∞-—â—å—é—è—ñ—ó—î“ë]/.test(after)) {
        error_text.textContent = `–£ —á–∞—Å—Ç–∏–Ω—ñ "${part}" –∞–ø–æ—Å—Ç—Ä–æ—Ñ –º–∞—î –±—É—Ç–∏ –º—ñ–∂ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏.`;
        return false;
      }
    }
  }
  error_text.textContent = "";
  elem.style.borderColor = "var(--primary-color)";
  return true;
};

window.checkUserSurname = function (elem) {
  let errors = [];
  const regexp =
    /^(?!–¨)[–ê-–©–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]*(?:'[–∞-—â—å—é—è—ñ—ó—î“ë]+)?[–∞-—â—å—é—è—ñ—ó—î“ë]*(?:-[–ê-–©–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]*(?:'[–∞-—â—å—é—è—ñ—ó—î“ë]+)?[–∞-—â—å—é—è—ñ—ó—î“ë]*)*$/;

  if (!regexp.test(elem.value)) {
    elem.style.borderColor = "red";
    errors.push("–Ü–º‚Äô—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏.");
  }

  console.log(error_text);
  const parts = elem.value.split("-");

  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];

    if (/[a-zA-Z]/.test(elem.value)) {
      elem.style.borderColor = "red";
      error_text.textContent = "–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏.";
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É (3 —Å–∏–º–≤–æ–ª–∏)
    if (part.replace(/'/g, "").length < 3) {
      error_text.textContent = `–ß–∞—Å—Ç–∏–Ω–∞ "${part}" –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 –±—É–∫–≤–∏.`;
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ—ó –ª—ñ—Ç–µ—Ä–∏
    if (!/^[–ê-–©–Æ–Ø–Ü–á–Ñ“ê]/.test(part)) {
      error_text.textContent = `–ß–∞—Å—Ç–∏–Ω–∞ "${part}" –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏.`;
      return false;
    }

    // –ù–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è —á–∏ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
    if (/^'/.test(part) || /'$/.test(part)) {
      error_text.textContent = `–£ —á–∞—Å—Ç–∏–Ω—ñ "${part}" –∞–ø–æ—Å—Ç—Ä–æ—Ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–±–æ –≤ –∫—ñ–Ω—Ü—ñ.`;
      return false;
    }

    // –ê–ø–æ—Å—Ç—Ä–æ—Ñ –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –ø–µ—Ä–µ–¥ –º–∞–ª–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é
    const apostrophes = [...part.matchAll(/'/g)];
    for (const match of apostrophes) {
      const pos = match.index;
      if (pos === 0 || pos === part.length - 1) continue; // –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏
      const before = part[pos - 1];
      const after = part[pos + 1];
      if (!/[–∞-—â—å—é—è—ñ—ó—î“ë]/.test(before) || !/[–∞-—â—å—é—è—ñ—ó—î“ë]/.test(after)) {
        error_text.textContent = `–£ —á–∞—Å—Ç–∏–Ω—ñ "${part}" –∞–ø–æ—Å—Ç—Ä–æ—Ñ –º–∞—î –±—É—Ç–∏ –º—ñ–∂ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏.`;
        return false;
      }
    }
  }
  error_text.textContent = "";
  elem.style.borderColor = "var(--primary-color)";
  return true;
};

window.checkPhoneNumber = function (elem) {
  const errors = [];
  elem.style.borderColor = "red";

  // –ü—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–±—ñ–ª–∏
  const trimmed = elem.value.trim();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤ ‚Äî –ª–∏—à–µ –¥–æ–ø—É—Å—Ç–∏–º—ñ
  if (!/^\+?\d+$/.test(trimmed)) {
    error_text.textContent =
      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –¥–æ–∑–≤–æ–ª–µ–Ω–æ '+' –Ω–∞ –ø–æ—á–∞—Ç–∫—É.";
    return false;
  }

  // –ó–∞–±—Ä–∞—Ç–∏ + –Ω–∞ –ø–æ—á–∞—Ç–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
  const digitsOnly = trimmed.startsWith("+") ? trimmed.slice(1) : trimmed;

  // –ú–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 38 –∞–±–æ 0
  if (!(digitsOnly.startsWith("38") || digitsOnly.startsWith("0"))) {
    error_text.textContent = "–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ +38, 38 –∞–±–æ 0.";
    return false;
  }

  // –í–∏—Ç—è–≥—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ü–∏—Ñ—Ä
  let coreNumber = "";
  if (digitsOnly.startsWith("38")) {
    coreNumber = digitsOnly.slice(2);
  } else if (digitsOnly.startsWith("0")) {
    coreNumber = digitsOnly;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
  if (coreNumber.length !== 10) {
    error_text.textContent =
      "–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä –ø—ñ—Å–ª—è –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏ (—Ç–æ–±—Ç–æ —Ñ–æ—Ä–º–∞—Ç 0XXYYYYYYY).";
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0
  if (!coreNumber.startsWith("0")) {
    error_text.textContent = "–û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 0.";
    return false;
  }

  error_text.textContent = "";
  elem.style.borderColor = "var(--primary-color)";
  return true;
};

const editNameBtn = document.getElementById("edit-name-btn");
const editSurnameBtn = document.getElementById("edit-surname-btn");
const editPhoneBtn = document.getElementById("edit-phone-btn");
let userInstance;

if (editNameBtn) {
  editNameBtn.addEventListener("click", async () => {
    if (checkUserName(formUser.name)) {
      userInstance.name = formUser.name.value;

      userInstance.saveToLocalStorage();

      try {
        await userInstance.updateFieldsInFirestore({
          name: userInstance.name,
        });
        console.log("–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:", userInstance.name);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Firestore:", err);
      }
    }
  });
}

if (editSurnameBtn) {
  editSurnameBtn.addEventListener("click", async () => {
    if (checkUserSurname(formUser.surname)) {
      userInstance.surname = formUser.surname.value;

      userInstance.saveToLocalStorage();

      try {
        await userInstance.updateFieldsInFirestore({
          surname: userInstance.surname,
        });
        console.log("–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:", userInstance.surname);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Firestore:", err);
      }
    }
  });
}

if (editPhoneBtn) {
  editPhoneBtn.addEventListener("click", async () => {
    if (checkPhoneNumber(formUser.phone)) {
      userInstance.phone = formUser.phone.value;

      userInstance.saveToLocalStorage();

      try {
        await userInstance.updateFieldsInFirestore({
          phone: userInstance.phone,
        });
        console.log("–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:", userInstance.phone);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Firestore:", err);
      }
    }
  });
}

document.addEventListener("DOMContentLoaded", () => {
  const currentUserData = localStorage.getItem("currentUser");

  if (currentUserData) {
    try {
      const userObject = JSON.parse(currentUserData);
      userInstance = new RegisterUser(userObject);
      console.log(userInstance);

      formUser.name.value = userInstance.name || "";
      formUser.surname.value = userInstance.surname || "";
      formUser.phone.value = userInstance.phone || "";

      // üéØ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–µ–º–ø—É –Ω–∞–≤—á–∞–Ω–Ω—è
      const paceOptions = document.querySelectorAll(".pace-option");
      const selectedTemp = userInstance.temp || "normal";

      paceOptions.forEach((option) => {
        const temp = option.getAttribute("data-temp");

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –æ–±—Ä–∞–Ω–∏–π —Ç–µ–º–ø
        if (temp === selectedTemp) {
          option.classList.add("selected");
        } else {
          option.classList.remove("selected");
        }

        // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
        option.addEventListener("click", () => {
          paceOptions.forEach((opt) => opt.classList.remove("selected"));
          option.classList.add("selected");

          // –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–º–ø
          userInstance.temp = temp;
          userInstance.saveToLocalStorage();
          userInstance.updateFieldsInFirestore({ temp: temp });

          console.log(`–¢–µ–º–ø –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ: ${temp}`);
        });

        const statistic = userInstance.updateStatistics();
        myProgress = statistic.completionRate;
        console.log(statistic);

        for (let i = 1; i <= statistic.totalModules; i++) {
          const key = `module${i}`;
          if (statistic[key] !== undefined) {
            barData.push(statistic[key]);
          } else {
            barData.push(0); // –Ø–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî 0%
          }
        }

        lineData = getVisitsArray(userInstance.visits, 7);

        updateBarChart(barData);
        updateLineChart(lineData);

        updateProgressCircle(myProgress);
      });
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É currentUser:", err);
    }
  } else {
    console.log("currentUser –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É localStorage.");
  }
});

window.checkPassword = function (elem) {
  elem.style.borderColor = "red";
  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
  if (elem.value.length < 8) {
    error_text.textContent = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.";
    error_text_main.textContent =
      "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.";
    return false;
  }

  // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, _ —ñ \
  if (!/^[a-zA-Z0-9_\\]+$/.test(elem.value)) {
    error_text.textContent =
      "–ü–∞—Ä–æ–ª—å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Å–∏–º–≤–æ–ª–∏ '_' —Ç–∞ '\\'.";
    error_text_main.textContent =
      "–ü–∞—Ä–æ–ª—å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Å–∏–º–≤–æ–ª–∏ '_' —Ç–∞ '\\'.";
    return false;
  }

  error_text.textContent = "";
  error_text_main.textContent = "";
  elem.style.borderColor = "var(--primary-color)";
  return true;
};

const changePasswordBtn = document.querySelector(".change-password-btn");
const modal = document.getElementById("change-password-modal");
const cancelBtn = document.getElementById("cancel-password-change");
const confirmBtn = document.getElementById("confirm-password-change");

changePasswordBtn.addEventListener("click", () => {
  modal.style.display = "flex";
});

cancelBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

confirmBtn.addEventListener("click", async () => {
  const currentPassword = document.getElementById("current-password").value;
  const newPassword = document.getElementById("new-password").value;

  if (!currentPassword || !newPassword) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è!");
    return;
  }

  try {
    const user = auth.currentUser;

    if (!user || !user.email) {
      alert("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.");
      return;
    }

    const credential = EmailAuthProvider.credential(
      user.email,
      currentPassword
    );

    if (checkPassword(document.getElementById("new-password")) === false) {
      alert("–ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º.");
      return;
    }

    // –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    await reauthenticateWithCredential(user, credential);

    // –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
    await updatePassword(user, newPassword);

    alert("–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    modal.style.display = "none";
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:", error);
    alert("–ü–æ–º–∏–ª–∫–∞: " + error.message);
  }
});

const paceOptions = document.querySelectorAll(".pace-option");

paceOptions.forEach((option) => {
  option.addEventListener("click", async () => {
    paceOptions.forEach((opt) => opt.classList.remove("selected"));
    option.classList.add("selected");

    const selectedTempo = option.dataset.temp;

    const user = RegisterUser.fromLocalStorage();
    if (!user) {
      console.error("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É localStorage");
      return;
    }

    user.temp = selectedTempo;

    user.saveToLocalStorage();

    try {
      await user.updateFieldsInFirestore({ temp: selectedTempo });
      console.log(`‚úÖ –¢–µ–º–ø "${selectedTempo}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.`);
    } catch (e) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–º–ø—É –≤ Firestore:", e);
    }
  });
});

function updateProgressCircle(percentage) {
  const circle = document.getElementById("progressCircle");
  const text = document.querySelector(".progress-text");

  const radius = circle.r.baseVal.value;
  const circumference = 2 * Math.PI * radius;

  circle.style.strokeDasharray = `${circumference} ${circumference}`;
  const offset = circumference - (percentage / 100) * circumference;
  circle.style.strokeDashoffset = offset;

  text.textContent = `${percentage}%`;
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞—Ä-—á–∞—Ä—Ç—É (–ø—Ä–æ–≥—Ä–µ—Å –ø–æ –º–æ–¥—É–ª—è—Ö)
function updateBarChart(dataArray) {
  const bars = document.querySelectorAll(".bar");
  bars.forEach((bar, index) => {
    if (dataArray[index] !== undefined) {
      bar.style.height = `${dataArray[index]}%`;
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
function updateLineChart(values) {
  const svg = document.querySelector(".line-chart-svg");
  const maxVal = 50; // –í–∏—Å–æ—Ç–∞ SVG –ø–æ –æ—Å—ñ Y
  const width = 100;
  const stepX = width / (values.length - 1);

  console.log(values);
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—É, —â–æ–± –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏
  const maxDataVal = Math.max(...values);

  const points = values.map((val, i) => {
    const x = i * stepX + 5;
    // –ú–∞—Å—à—Ç–∞–±—É—î–º–æ val –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É [0..maxVal]
    const scaledVal = (val / maxDataVal) * maxVal;
    // –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ Y (0 - –∑–≤–µ—Ä—Ö—É, maxVal - –∑–Ω–∏–∑—É)
    const y = maxVal - scaledVal;
    return `${x},${y}`;
  });

  // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
  const polyline = svg.querySelector("polyline");
  polyline.setAttribute("points", points.join(" "));

  // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–æ—á–∫–∏
  svg.querySelectorAll("circle").forEach((c) => c.remove());

  // –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏
  values.forEach((val, i) => {
    const cx = i * stepX + 5;
    const scaledVal = (val / maxDataVal) * maxVal;
    const cy = maxVal - scaledVal;
    const circle = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "circle"
    );
    circle.setAttribute("class", "point");
    circle.setAttribute("cx", cx);
    circle.setAttribute("cy", cy);
    circle.setAttribute("r", 2.5);
    svg.appendChild(circle);
  });
}

// üß™ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ

// üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é

function getVisitsArray(visitsObj, daysCount = 7) {
  const result = [];
  const today = new Date();
  console.log(visitsObj);
  for (let i = daysCount - 1; i >= 0; i--) {
    const d = new Date(today);
    d.setDate(today.getDate() - i);
    const key = d.toISOString().slice(0, 10);
    result.push(visitsObj[key] || 0);
  }

  return result;
}

const tabButtons = document.querySelectorAll(".tab-button");
const leaderboardTable = document.querySelector(".leaderboard-table tbody");

let moduleData = {};

tabButtons.forEach((button) => {
  button.addEventListener("click", () => {
    // –ê–∫—Ç–∏–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ç–∞–±
    tabButtons.forEach((btn) => btn.classList.remove("active"));
    button.classList.add("active");
    button.classList.remove("inactive");

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º–æ–¥—É–ª—è
    const moduleName = button.textContent.trim();

    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
    leaderboardTable.innerHTML = "";

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –∑ –¥–∞–Ω–∏—Ö –º–æ–¥—É–ª—è
    const data = moduleData[moduleName] || [];
    data.forEach((row) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
            <td class="rank-col">${row.rank}</td>
            <td class="player-col">${row.player}</td>
            <td class="score-col">${row.score}</td>
          `;
      leaderboardTable.appendChild(tr);
    });
  });
});


async function fetchAllUsers() {
  const usersCollection = collection(db, "users");
  const querySnapshot = await getDocs(usersCollection);

  const users = [];

  querySnapshot.forEach((docSnap) => {
    const userData = docSnap.data();
    userData.uid = docSnap.id;
    const user = new RegisterUser(userData);
    users.push(user);
  });

  return users;
}

fetchAllUsers()
  .then((users) => {
    const resultsByUser = users.map((user) => {
      const modules = user.progress.modules || [];
      const moduleScores = modules.map((m) => ({
        moduleName: m.name,
        score: m.test?.score || 0,
      }));
      const totalScore = moduleScores.reduce((sum, m) => sum + m.score, 0);

      return {
        name: user.name || "Unknown",
        uid: user.uid,
        moduleScores,
        totalScore,
      };
    });

    const sortedTotal = [...resultsByUser].sort(
      (a, b) => b.totalScore - a.totalScore
    );

    const moduleNames = new Set();
    resultsByUser.forEach((user) =>
      user.moduleScores.forEach((m) => moduleNames.add(m.moduleName))
    );

    // –°—Ç–≤–æ—Ä—é—î–º–æ moduleData
    moduleData["–ó–∞–≥–∞–ª—å–Ω–∏–π"] = sortedTotal.map((user, index) => ({
      rank: index + 1,
      player: user.name,
      score: user.totalScore,
    }));

    moduleNames.forEach((moduleName) => {
      const moduleResults = resultsByUser
        .map((user) => {
          const moduleScore = user.moduleScores.find(
            (m) => m.moduleName === moduleName
          );
          return {
            name: user.name,
            score: moduleScore?.score || 0,
          };
        })
        .sort((a, b) => b.score - a.score);

      moduleData[moduleName] = moduleResults.map((res, idx) => ({
        rank: idx + 1,
        player: res.name,
        score: res.score,
      }));
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è moduleData
    const tabButtons = document.querySelectorAll(".tab-button");
    const leaderboardTable = document.querySelector(".leaderboard-table tbody");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");
        button.classList.remove("inactive");

        const moduleName = button.textContent.trim();

        leaderboardTable.innerHTML = "";

        const data = moduleData[moduleName] || [];
        data.forEach((row) => {
          const tr = document.createElement("tr");
          tr.innerHTML = `
                <td class="rank-col">${row.rank}</td>
                <td class="player-col">${row.player}</td>
                <td class="score-col">${row.score}</td>
              `;
          leaderboardTable.appendChild(tr);
        });
      });
    });

    // –ú–æ–∂–ª–∏–≤–æ, –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥?
    document.querySelector(".tab-button.active")?.click();
  })
  .catch((error) => {
    console.error("–ü–æ–º–∏–ª–∫–∞:", error);
  });


// –î–æ–¥–∞–π —Ç–∞–±–ª–∏—Ü—ñ –ø–æ –º–æ–¥—É–ª—è—Ö
// moduleNames.forEach((moduleName) => {
//   const moduleResults = resultsByUser
//     .map((user) => {
//       const moduleScore = user.moduleScores.find(
//         (m) => m.moduleName === moduleName
//       );
//       return {
//         name: user.name,
//         score: moduleScore?.score || 0,
//       };
//     })
//     .sort((a, b) => b.score - a.score);

//   moduleData[moduleName] = moduleResults.map((res, idx) => ({
//     rank: idx + 1,
//     player: res.name,
//     score: res.score,
//   }));
// });