import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  serverTimestamp,
  query,
  collection,
  where,
  getDocs,
  arrayRemove,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
import { db, auth } from "./firebase-config.js";

const tempoSchedule = {
  slow: [1, 2, 3, 4], // 1 –≥–æ–¥, 2 –≥–æ–¥, ...
  normal: [0.5, 1, 2, 3], // 30 —Ö–≤, 1 –≥–æ–¥, ...
  fast: [0.25, 0.5, 1, 2], // 15 —Ö–≤, 30 —Ö–≤, ...
};

let quizQuestions;
let userProgress;
window.correctAnswers = 0;

export class RegisterUser {
  constructor(data) {
    this.uid = data.uid || null;
    this.name = data.name;
    this.surname = data.surname;
    this.email = data.email;
    this.phone = data.phone;
    this.registeredAt = data.registeredAt;
    this.temp = data.temp || "normal";
    this.progress =
      data.progress instanceof UserProgress
        ? data.progress
        : UserProgress.fromData(data.progress || []);
    this.notifications = (() => {
      if (data.notifications instanceof NotificationManager) {
        return data.notifications;
      } else if (Array.isArray(data.notifications)) {
        return new NotificationManager(data.notifications);
      } else {
        return new NotificationManager([]);
      }
    })();
    this.generatedOffsets = data.generatedOffsets || [];
    this.visits =
      typeof data.visits === "object" && data.visits !== null
        ? data.visits
        : {};
  }

  static fromLocalStorage() {
    const dataString = localStorage.getItem("currentUser");
    if (!dataString) return null;

    try {
      const data = JSON.parse(dataString);
      data.progress = UserProgress.fromData(data.progress || []);
      data.notifications = new NotificationManager(data.notifications || []);

      return new RegisterUser(data);
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É currentUser –∑ localStorage:", e);
      localStorage.removeItem("currentUser");
      return null;
    }
  }

  toJSON() {
    return {
      uid: this.uid,
      name: this.name,
      surname: this.surname,
      email: this.email,
      phone: this.phone,
      registeredAt: this.registeredAt,
      temp: this.temp,
      progress: this.progress.toJSON(),
      notifications:
        this.notifications instanceof NotificationManager
          ? this.notifications.toJSON()
          : new NotificationManager(this.notifications || []).toJSON(), // fallback
      generatedOffsets: this.generatedOffsets || [],
      visits: this.visits || 0,
    };
  }

  updateStatistics() {
    const totalModules = this.progress.modules.length;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —ñ–∑ –∫–ª—é—á–∞–º–∏ module1, module2... —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏
    const modulesProgressPercents = {};

    this.progress.modules.forEach((module, index) => {
      const key = `module${index + 1}`;
      modulesProgressPercents[key] = getProgressPercent(module);
    });

    // –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å —è–∫ —Å–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
    const totalProgress = Object.values(modulesProgressPercents).reduce(
      (sum, p) => sum + p,
      0
    );
    const completionRate = totalModules > 0 ? totalProgress / totalModules : 0;

    let statistics = {
      totalModules,
      completedModules: this.progress.modules.filter((m) => m.isCompleted())
        .length,
      completionRate: Math.round(completionRate),
      ...modulesProgressPercents, // –¥–æ–¥–∞—î–º–æ –ø–æ–ª—è module1, module2, ... –≤ statistics
    };

    return statistics;
  }

  incrementVisits() {
    const today = new Date().toISOString().slice(0, 10); // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD

    if (!this.visits[today]) {
      this.visits[today] = 0;
    }
    this.visits[today]++;

    this.saveToLocalStorage();
    if (this.uid) {
      this.updateFieldsInFirestore({ visits: this.visits });
    }
  }

  saveToLocalStorage() {
    try {
      localStorage.setItem("currentUser", JSON.stringify(this.toJSON()));
    } catch (e) {
      console.error(
        "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è currentUser (–∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º) –≤ localStorage:",
        e
      );
    }
  }

  updateProgress(progressData) {
    if (progressData instanceof UserProgress) {
      this.progress = progressData;
    } else {
      this.progress = UserProgress.fromData(progressData || []);
    }
  }

  static async fetchFromDatabaseByEmail(email) {
    const q = query(collection(db, "users"), where("email", "==", email));
    const querySnapshot = await getDocs(q);
    if (!querySnapshot.empty) {
      const docSnap = querySnapshot.docs[0];
      const userData = docSnap.data();
      userData.uid = docSnap.id;
      return new RegisterUser(userData);
    } else {
      throw new Error("User not found in Firestore");
    }
  }

  static async ensureInitialized(uid) {
    const userRef = doc(db, "users", uid);
    let snap = await getDoc(userRef);

    if (!snap.exists()) {
      console.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É Firestore (ensureInitialized).");
      return null;
    }

    let firestoreUserData = snap.data();

    // –Ø–∫—â–æ –ø—Ä–æ–≥—Ä–µ—Å—É —â–µ –Ω–µ–º–∞—î ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏
    if (!firestoreUserData.progress) {
      const initialProgressObject = initializeModulesProgress();
      const progressForFirestore = initialProgressObject.toJSON();

      await updateDoc(userRef, {
        progress: progressForFirestore,
        lastUpdated: serverTimestamp(),
      });

      snap = await getDoc(userRef);
      if (snap.exists()) {
        firestoreUserData = snap.data();
      } else {
        console.error(
          "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–≥—Ä–µ—Å—É."
        );
        return null;
      }
    }

    const localCurrentUserInstance = RegisterUser.fromLocalStorage();
    if (localCurrentUserInstance && localCurrentUserInstance.uid === uid) {
      let instanceUpdated = false;
      for (const key in firestoreUserData) {
        if (Object.prototype.hasOwnProperty.call(firestoreUserData, key)) {
          const firestoreValue = firestoreUserData[key];
          let needsUpdate = false;

          if (!(key in localCurrentUserInstance)) {
            needsUpdate = true;
          } else if (key === "progress") {
            if (
              localCurrentUserInstance.progress &&
              typeof localCurrentUserInstance.progress.toJSON === "function"
            ) {
              if (
                JSON.stringify(localCurrentUserInstance.progress.toJSON()) !==
                JSON.stringify(firestoreValue)
              ) {
                needsUpdate = true;
              }
            } else {
              if (firestoreValue !== undefined) needsUpdate = true;
            }
          } else {
            if (
              JSON.stringify(localCurrentUserInstance[key]) !==
              JSON.stringify(firestoreValue)
            ) {
              needsUpdate = true;
            }
          }

          if (needsUpdate) {
            if (key === "progress") {
              localCurrentUserInstance.updateProgress(firestoreValue);
            } else if (key === "notifications") {
              localCurrentUserInstance.notifications = new NotificationManager(
                firestoreValue || []
              );
            } else if (key === "generatedOffsets") {
              localCurrentUserInstance.generatedOffsets = firestoreValue || [];
            } else {
              localCurrentUserInstance[key] = firestoreValue;
            }
            instanceUpdated = true;
          }
        }
      }

      if (instanceUpdated) {
        localCurrentUserInstance.saveToLocalStorage();
      }
    } else {
      // üîß –§—ñ–∫—Å: –ü—Ä–∏–≤–æ–¥–∏–º–æ notifications –¥–æ NotificationManager
      if (
        !firestoreUserData.notifications ||
        !Array.isArray(firestoreUserData.notifications)
      ) {
        firestoreUserData.notifications = [];
      }
      firestoreUserData.notifications = new NotificationManager(
        firestoreUserData.notifications
      );

      const newCurrentUserInstance = new RegisterUser(firestoreUserData);
      newCurrentUserInstance.saveToLocalStorage();
    }

    if (localStorage.getItem("userProgress")) {
      localStorage.removeItem("userProgress");
    }

    return firestoreUserData.progress
      ? UserProgress.fromData(firestoreUserData.progress)
      : new UserProgress([]);
  }

  async updateFieldsInFirestore(fieldsToUpdate) {
    if (!this.uid) {
      throw new Error("–ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π UID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }

    const userRef = doc(db, "users", this.uid);

    try {
      await updateDoc(userRef, {
        ...fieldsToUpdate,
        lastUpdated: serverTimestamp(),
      });
      console.log(
        "–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —É Firestore:",
        fieldsToUpdate
      );

      Object.keys(fieldsToUpdate).forEach((key) => {
        if (key === "progress") {
          this.updateProgress(fieldsToUpdate[key]);
        } else if (key === "notifications") {
          this.notifications = new NotificationManager(
            fieldsToUpdate[key] || []
          );
        } else {
          this[key] = fieldsToUpdate[key];
        }
      });

      this.saveToLocalStorage();
    } catch (error) {
      console.error(
        "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firestore:",
        error
      );
      throw error;
    }
  }
}

export class NotificationManager {
  constructor(notifications = []) {
    this.notifications = Notification.fromDataArray(notifications);
  }

  addNotification(notificationData) {
    const newNotification = new Notification(notificationData);
    this.notifications.unshift(newNotification);
  }

  toJSON() {
    return this.notifications.map((n) =>
      n instanceof Notification ? n.toJSON() : new Notification(n).toJSON()
    );
  }

  static fromData(data) {
    return new NotificationManager(data);
  }

  saveToLocalStorage() {
    const localUser = RegisterUser.fromLocalStorage();
    if (localUser) {
      localUser.notifications = this;
      localUser.saveToLocalStorage();
    }
  }
}

export class Notification {
  constructor(data = {}) {
    this.id = data.id || crypto.randomUUID();
    this.message = data.message || "";
    this.type = data.type || "info";
    this.timestamp = data.timestamp || new Date().toISOString();
    this.read = data.read !== undefined ? data.read : false;
  }

  static fromDataArray(dataArray = []) {
    return dataArray.map((data) => new Notification(data));
  }

  toJSON() {
    return {
      id: this.id,
      message: this.message,
      type: this.type,
      timestamp: this.timestamp,
      read: this.read,
    };
  }

  static async addNotificationToUser(userId, notification) {
    const userRef = doc(db, "users", userId);
    const notifObj =
      notification instanceof Notification
        ? notification.toJSON()
        : new Notification(notification).toJSON();

    try {
      await updateDoc(userRef, {
        notifications: arrayUnion(notifObj),
      });
      console.log("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.");
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
    }
  }

  static async markAsRead(userId, notificationId) {
    const userRef = doc(db, "users", userId);
    const localUser = RegisterUser.fromLocalStorage();

    try {
      const userSnap = await getDoc(userRef);
      if (!userSnap.exists()) throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

      const data = userSnap.data();

      // üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç NotificationManager
      const currentManager = new NotificationManager(data.notifications || []);
      currentManager.notifications = currentManager.notifications.map((notif) =>
        notif.id === notificationId ? { ...notif, read: true } : notif
      );

      // üß† –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      localUser.notifications = currentManager;

      // üíæ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤ Firestore
      await localUser.updateFieldsInFirestore({
        notifications: currentManager.toJSON(),
      });

      console.log("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ.");
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
    }
  }

  static async removeNotificationFromUser(userId, notification) {
    try {
      const localUser = RegisterUser.fromLocalStorage();
      if (!localUser) {
        throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É localStorage");
      }

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      const manager = localUser.notifications;
      manager.notifications = manager.notifications.filter(
        (n) => n.id !== notification.id
      );

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤ Firestore —á–µ—Ä–µ–∑ updateFieldsInFirestore
      await localUser.updateFieldsInFirestore({
        notifications: manager.toJSON(),
      });

      console.log("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.");
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
    }
  }
}

export class Question {
  constructor({ id, text, type, options = [], correctAnswer, points = 1 }) {
    this.id = id;
    this.text = text;
    this.type = type;
    this.options = options;
    this.correctAnswer = correctAnswer;
    this.points = points;
  }

  isCorrect(userAnswer) {
    if (this.type === "open") {
      return (
        String(userAnswer).trim().toLowerCase() ===
        String(this.correctAnswer[0]).trim().toLowerCase()
      );
    }
    if (this.type === "single") {
      return userAnswer === this.correctAnswer[0];
    }
    if (this.type === "multiple") {
      const correct = [...this.correctAnswer].sort();
      const answer = [...userAnswer].sort();
      return (
        Array.isArray(userAnswer) &&
        correct.length === answer.length &&
        correct.every((v, i) => v === answer[i])
      );
    }
    return false;
  }
}

export class Answer {
  constructor({ questionId, userAnswer, isCorrect = false, pointsEarned = 0 }) {
    this.questionId = questionId;
    this.userAnswer = userAnswer !== undefined ? userAnswer : null;
    this.isCorrect = isCorrect;
    this.pointsEarned = pointsEarned;
  }

  evaluate(question) {
    this.isCorrect = question.isCorrect(this.userAnswer);
    this.pointsEarned = this.isCorrect ? question.points : 0;
  }

  toJSON() {
    return {
      questionId: this.questionId,
      userAnswer: this.userAnswer,
      isCorrect: this.isCorrect,
      pointsEarned: this.pointsEarned,
    };
  }

  static fromData(data = {}) {
    if (!data || typeof data !== "object") {
      console.warn("Answer.fromData received invalid data:", data);
      return new Answer();
    }
    return new Answer({
      questionId: data.questionId,
      userAnswer: data.userAnswer,
      isCorrect: data.isCorrect,
      pointsEarned: data.pointsEarned,
    });
  }
}

export class Test {
  constructor(data = {}) {
    this.id =
      data.id ||
      `test_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;
    this.startedAt = data.startedAt || null;
    this.finishedAt = data.finishedAt || null;
    this.answers = {};
    if (data.answers) {
      Object.keys(data.answers).forEach((qId) => {
        this.answers[qId] = Answer.fromData(data.answers[qId]);
      });
    }
    this.score = data.score || 0;
    this.maxScore = data.maxScore || 0;
    this.passed = data.passed || false;
  }

  start() {
    if (!this.startedAt) {
      this.startedAt = new Date().toISOString();
      this.finishedAt = null;
      this.answers = {};
      this.score = 0;
      this.passed = false;
    }
  }

  addAnswer(answerInstance) {
    if (answerInstance instanceof Answer && answerInstance.questionId) {
      this.answers[answerInstance.questionId] = answerInstance;
    } else {
      console.error(
        "Invalid answerInstance provided to Test.addAnswer:",
        answerInstance
      );
    }
  }

  finish(questionsArray = []) {
    if (this.finishedAt) {
      console.warn("–¢–µ—Å—Ç –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –≤–∏–∫–ª–∏–∫ finish —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è.");
      return;
    }
    this.finishedAt = new Date().toISOString();
    this.calculateScore(questionsArray);
  }

  calculateScore(questionsArray = []) {
    let currentScore = 0;
    let currentMaxScore = 0;

    Object.values(this.answers).forEach((answerInstance) => {
      currentScore += answerInstance.pointsEarned || 0;
    });

    if (questionsArray && questionsArray.length > 0) {
      questionsArray.forEach((q) => {
        currentMaxScore += q.points || 0;
      });
    } else {
      console.warn(
        "questionsArray –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤ calculateScore. maxScore –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–Ω–∞–∫—à–µ."
      );
      currentMaxScore = this.maxScore || 0;
      if (currentMaxScore === 0 && Object.keys(this.answers).length > 0) {
        console.warn(
          "Trying to deduce maxScore from answered questions' points."
        );
        Object.values(this.answers).forEach((ans) => {
          const qData = window.questions.find((q) => q.id === ans.questionId);
          if (qData) currentMaxScore += qData.points || 0;
        });
      }
    }

    this.score = currentScore;
    this.maxScore = currentMaxScore > 0 ? currentMaxScore : this.maxScore;
  }

  getDurationMs() {
    if (!this.startedAt || !this.finishedAt) return 0;
    try {
      return (
        new Date(this.finishedAt).getTime() - new Date(this.startedAt).getTime()
      );
    } catch (e) {
      return 0;
    }
  }

  getCorrectAnswersCount() {
    return Object.values(this.answers).filter((ans) => ans.isCorrect).length;
  }

  reset() {
    this.startedAt = null;
    this.finishedAt = null;
    this.answers = {};
    this.score = 0;
    this.passed = false;
    console.log("Test has been reset.");
  }

  toJSON() {
    const answersAsJson = {};
    for (const qId in this.answers) {
      if (
        this.answers.hasOwnProperty(qId) &&
        this.answers[qId] instanceof Answer
      ) {
        answersAsJson[qId] = this.answers[qId].toJSON();
      }
    }
    return {
      id: this.id,
      startedAt: this.startedAt,
      finishedAt: this.finishedAt,
      answers: answersAsJson,
      score: this.score,
      maxScore: this.maxScore,
      passed: this.passed,
    };
  }

  static fromData(data = {}) {
    const test = new Test();
    test.id = data.id || test.id;
    test.startedAt = data.startedAt || null;
    test.finishedAt = data.finishedAt || null;
    test.score = data.score || 0;
    test.maxScore = data.maxScore || 0;
    test.passed = data.passed || false;
    test.answers = {};

    if (data.answers && typeof data.answers === "object") {
      Object.keys(data.answers).forEach((qId) => {
        if (data.answers[qId]) {
          test.answers[qId] = Answer.fromData(data.answers[qId]);
        }
      });
    }
    return test;
  }
}

export class Module {
  constructor({
    id,
    name,
    theoryCompleted = false,
    test = null,
    miniGameUnlocked = false,
    RedactorUnlocked = false,
    completedAt = null,
    started = false,
    description,
    url,
  }) {
    this.id = id;
    this.name = name;
    this.theoryCompleted = theoryCompleted;
    this.test = test ? Test.fromData(test) : new Test();
    this.miniGameUnlocked = miniGameUnlocked;
    this.RedactorUnlocked = RedactorUnlocked;
    this.completedAt = completedAt;
    this.started = started;
    this.description = description;
    this.url = url;
  }

  isCompleted() {
    return this.theoryCompleted && this.test?.passed;
  }

  unlockMiniGame() {
    if (this.isCompleted()) {
      this.miniGameUnlocked = true;
    }
  }

  start() {
    this.started = true;
    this.test?.start();
  }

  toJSON() {
    return {
      id: this.id,
      name: this.name,
      theoryCompleted: this.theoryCompleted,
      test: this.test.toJSON(),
      miniGameUnlocked: this.miniGameUnlocked,
      RedactorUnlocked: this.RedactorUnlocked,
      completedAt: this.completedAt,
      started: this.started,
      description: this.description,
      url: this.url,
    };
  }

  static fromData(data) {
    return new Module(data);
  }

  static fromLocalStorage(moduleId) {
    if (!moduleId) {
      console.error("Module.fromLocalStorage: moduleId –Ω–µ –Ω–∞–¥–∞–Ω–æ.");
      return null;
    }
    const dataString = localStorage.getItem(`module_${moduleId}`);
    if (!dataString) {
      console.warn(
        `Module.fromLocalStorage: –î–∞–Ω—ñ –¥–ª—è –º–æ–¥—É–ª—è ${moduleId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`
      );
      return null;
    }

    try {
      const data = JSON.parse(dataString);
      return new Module(data);
    } catch (e) {
      console.error(
        `–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö –º–æ–¥—É–ª—è ${moduleId} –∑ localStorage:`,
        e
      );
      localStorage.removeItem(`module_${moduleId}`);
      return null;
    }
  }
}

export class UserProgress {
  constructor(modules = []) {
    if (!modules || modules.length === 0) {
      this.modules = initializeModulesProgress().modules;
    } else {
      this.modules = modules.map((m) => new Module(m));
    }
  }

  getModuleById(id) {
    return this.modules.find((m) => m.id === id);
  }

  unlockNextModule(currentModuleId) {
    const index = this.modules.findIndex((m) => m.id === currentModuleId);
    const next = this.modules[index + 1];
    if (next && this.modules[index].isCompleted()) {
      next.start();
    }
  }

  toJSON() {
    return this.modules.map((module) => module.toJSON());
  }

  static fromData(modulesData) {
    if (
      !modulesData ||
      !Array.isArray(modulesData) ||
      modulesData.length === 0
    ) {
      return initializeModulesProgress();
    }
    return new UserProgress(modulesData);
  }
}

async function loadProgressFromFirestore(uid) {
  const userRef = doc(db, "users", uid);
  const snap = await getDoc(userRef);

  if (snap.exists()) {
    const firestoreData = snap.data();

    const localUser = RegisterUser.fromLocalStorage();
    if (localUser && localUser.uid === uid) {
      let updated = false;
      for (const key in firestoreData) {
        if (Object.prototype.hasOwnProperty.call(firestoreData, key)) {
          const firestoreValue = firestoreData[key];
          let needsUpdate = false;

          if (!(key in localUser)) {
            needsUpdate = true;
          } else if (key === "progress") {
            if (
              localUser.progress &&
              typeof localUser.progress.toJSON === "function"
            ) {
              if (
                JSON.stringify(localUser.progress.toJSON()) !==
                JSON.stringify(firestoreValue)
              ) {
                needsUpdate = true;
              }
            } else {
              if (firestoreValue !== undefined) needsUpdate = true;
            }
          } else {
            if (
              JSON.stringify(localUser[key]) !== JSON.stringify(firestoreValue)
            ) {
              needsUpdate = true;
            }
          }

          if (needsUpdate) {
            if (key === "progress") {
              localUser.updateProgress(firestoreValue);
            } else if (key === "notifications") {
              localUser.notifications = new NotificationManager(
                firestoreValue || []
              );
            } else {
              localUser[key] = firestoreValue;
            }
            updated = true;
          }
        }
      }

      if (updated) {
        localUser.saveToLocalStorage();
      }
    } else {
      // üîß –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–∏–ø–æ–º notifications
      if (
        !firestoreData.notifications ||
        !Array.isArray(firestoreData.notifications)
      ) {
        firestoreData.notifications = [];
      }
      firestoreData.notifications = new NotificationManager(
        firestoreData.notifications
      );

      const newUser = new RegisterUser(firestoreData);
      newUser.saveToLocalStorage();
    }

    return UserProgress.fromData(firestoreData.progress || []);
  } else {
    console.error(
      `User document with UID ${uid} not found in Firestore. Cannot load progress.`
    );
    throw new Error(
      `User document for UID ${uid} not found. Unable to load progress.`
    );
  }
}

function initializeModulesProgress() {
  const defaultModules = [
    {
      id: "module1",
      name: "–ú–æ–¥—É–ª—å 1",
      description:
        "–û—Å–Ω–æ–≤–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó (–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó) —Ç–∞ —Ä–∞—Å—Ç—Ä–æ–≤–æ—ó (–ø—ñ–∫—Å–µ–ª—å–Ω–æ—ó) –≥—Ä–∞—Ñ—ñ–∫–∏, —ó—Ö –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è.",
      url: "module1.html",
    },
    {
      id: "module2",
      name: "–ú–æ–¥—É–ª—å 2",
      description: "–ü–ª–∞–≤–Ω—ñ –∫—Ä–∏–≤—ñ –ë–µ–∑—å—î, —ó—Ö —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.",
      url: "module2.html",
    },
    {
      id: "module3",
      name: "–ú–æ–¥—É–ª—å 3",
      description:
        "–í–∏–≤—á–µ–Ω–Ω—è —Ñ—Ä–∞–∫—Ç–∞–ª—ñ–≤: —Ç–∏–ø–∏, –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ —ó—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —É –≥—Ä–∞—Ñ—ñ—Ü—ñ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.",
      url: "module3.html",
    },
    {
      id: "module4",
      name: "–ú–æ–¥—É–ª—å 4",
      description:
        "–°–∏—Å—Ç–µ–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω–∞—Ö —Ç–∞ —É –¥—Ä—É—Ü—ñ.",
      url: "module4.html",
    },
    {
      id: "module5",
      name: "–ú–æ–¥—É–ª—å 5",
      description:
        "–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è –æ–±'—î–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∞—Ñ—ñ–Ω–Ω—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö–æ–Ω—å –¥–ª—è —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–æ—ó –≥—Ä–∞—Ñ—ñ–∫–∏.",
      url: "module5.html",
    },
  ];

  return new UserProgress(
    defaultModules.map((mod, index) => ({
      ...mod,
      theoryCompleted: false,
      test: {},
      miniGameUnlocked: false,
      RedactorUnlocked: false,
      completedAt: null,
      started: index === 0,
    }))
  );
}

function initializeGame() {
  const defaultGames = [
    {
      id: "game1",
      name: "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
      description: "–ü–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fpuzzle%201.png?alt=media&token=5ba09152-cc32-42a9-a598-b38dcaea7b50",
      url: "/FOR_LAB1/index.html",
      color: "#bae2ff",
    },
    {
      id: "game2",
      name: "–ú'—è—á–∏–∫",
      description: "–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∏–≤–æ—é –ë–µ–∑—å—î",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Ffootball%20ball%201.png?alt=media&token=c70b04fb-1f6d-434f-b0c9-055fb2560ecb",
      url: "/Snake/index.html",
      color: "#ffd75e",
    },
    {
      id: "game3",
      name: "–ü–∞–∑–ª–∏",
      description: "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—Ä–∞–∫—Ç–∞–ª—ñ–≤",
      url: "/puzzle/main-window.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fcube%201.png?alt=media&token=b19a8534-87ad-4e58-ae5b-5ddf1465ce83",
      color: "#ffd2cd",
    },
    {
      id: "game4",
      name: "–ö–æ–ª—å–æ—Ä–∏",
      description: "–°–∏—Å—Ç–µ–º–∏ + –∫–æ–ª—ñ—Ä",
      url: "/Colors_GAME/main.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fbrain%201.png?alt=media&token=077bc3ef-1eeb-4696-976c-94a9cc9fb8c6",
      color: "#ffcb80",
    },
    {
      id: "game5",
      name: "–¢–µ—Ç—Ä—ñ—Å",
      description: "–ü—Ä–æ—Å—Ç–æ —Ç–µ—Ç—Ä—ñ—Å",
      url: "/tetris/index.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fflag%201.png?alt=media&token=062851ef-8db7-4fb1-b3b3-90de7adad6d0",
      color: "#b2edcf",
    },
  ];
  return defaultGames;
}

function initializeRedactor() {
  const defaultRedactors = [
    {
      id: "redactor1",
      name: "–†–µ–¥–∞–∫—Ç–æ—Ä",
      description: "–ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö —Ñ—ñ–≥—É—Ä",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Ffigures%201.png?alt=media&token=fb120e15-246e-478a-b088-7d1c2a0598d1",
      url: "/figure-redactor/index.html",
      color: "#569df5",
    },
    {
      id: "redactor2",
      name: "–†–µ–¥–∞–∫—Ç–æ—Ä",
      description: "–ö—Ä–∏–≤–æ—ó –ë–µ–∑—å—î",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fcurve%201.png?alt=media&token=fef4d0f2-b178-4a60-8b7f-66b122b691f2",
      url: "/KG_Lab_02-main/index.html",
      color: "#9796e2",
    },
    {
      id: "redactor3",
      name: "–†–µ–¥–∞–∫—Ç–æ—Ä",
      description: "–§—Ä–∞–∫—Ç–∞–ª—ñ–≤",
      url: "/Fractal-Explorer-main/algebraic.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Ffractal%201.png?alt=media&token=ac1715a3-2f3d-4189-98ad-620e8e9994dd",
      color: "#45bcbc",
    },
    {
      id: "redactor4",
      name: "–†–µ–¥–∞–∫—Ç–æ—Ä",
      description: "–ö–æ–ª—ñ—Ä–Ω–∏—Ö —Å—Ö–µ–º",
      url: "/CG_Lab4/index.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fcolor-schema%201.png?alt=media&token=bc2eab20-2758-46ef-a080-86e6f03ef605",
      color: "#fed1a3",
    },
    {
      id: "redactor5",
      name: "–†–µ–¥–∞–∫—Ç–æ—Ä",
      description: "–ê—Ñ—ñ–Ω–Ω–∏—Ö –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å",
      url: "/afini-redactor/index.html",
      img: "https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fgraphics%201.png?alt=media&token=5b97d426-648f-4b33-99ea-3727e435dae4",
      color: "#FFD0CD",
    },
  ];
  return defaultRedactors;
}

function tryStartNextModule(modules, currentModuleId) {
  console.log(modules);
  const currentIndex = modules.findIndex((m) => m.id === currentModuleId);
  console.log(currentIndex);
  if (currentIndex === -1 || currentIndex === modules.length - 1) return;

  const currentModule = modules[currentIndex];
  const nextModule = modules[currentIndex + 1];
  console.log(nextModule);
  console.log(currentModule);

  if (currentModule.isCompleted() && !nextModule.started) {
    console.log(nextModule);
    nextModule.start();
    nextModule.test.startedAt = null;
    console.log(`–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å (ID: ${nextModule.id}) —Ä–æ–∑–ø–æ—á–∞—Ç–æ.`);
  } else {
    console.log("–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å –≤–∂–µ –ø–æ—á–∞—Ç–æ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
  }
}

function renderGames(userProgress) {
  const container = document.querySelector(".games-grid");
  container.innerHTML = "";

  const games = initializeGame();

  userProgress.modules.forEach((module, index) => {
    const card = document.createElement("div");
    card.classList.add("game-card");

    if (module.isCompleted()) {
      card.innerHTML = getCompletedGameHTML(games[index]);
    } else {
      card.innerHTML = getLockedGameHTML(games[index]);
    }

    container.appendChild(card);
  });
}

function renderRedactor(userProgress) {
  const container = document.querySelector(".sandbox-grid");
  container.innerHTML = "";

  const redactors = initializeRedactor();

  userProgress.modules.forEach((module, index) => {
    const card = document.createElement("div");
    card.classList.add("sandbox-card");

    if (module.isCompleted()) {
      card.classList.add("available");
      card.innerHTML = getCompletedRedactorHTML(redactors[index]);
    } else {
      card.classList.add("unavailable");
      card.innerHTML = getLockedRedactorHTML(redactors[index]);
    }

    container.appendChild(card);
  });
}

function getCompletedRedactorHTML(redactor) {
  return `
    <div class="sandbox-image" style="--bg: ${redactor.color}">
          <img
            src="${redactor.img}"
            alt="${redactor.name}"
          />
        </div>
        <div class="game-content">
          <h3>${redactor.name}</h3>
          <p>${redactor.description}</p>
          <span class="status available" onclick="window.location.href='${redactor.url}'">–£–≤—ñ–π—Ç–∏</span>
        </div>
  `;
}

function getLockedRedactorHTML(game) {
  return `
    <div class="sandbox-image" style="--bg: ${game.color}">
          <img
            src="${game.img}"
            alt="${game.name}"
          />
        </div>
        <div class="game-content">
          <h3>${game.name}</h3>
          <p>${game.description}</p>
          <span disabled class=" status unavailable" onclick="window.location.href='${game.url}'">–ë–ª–æ–∫</span>
        </div>
  `;
}

function getCompletedGameHTML(game) {
  return `
    <div class="game-image" style="--bg: ${game.color}">
          <img
            src="${game.img}"
            alt="${game.name}"
          />
        </div>
        <div class="game-content">
          <h3>${game.name}</h3>
          <p>${game.description}</p>
          <button class="status available" onclick="window.location.href='${game.url}'">–ì—Ä–∞—Ç–∏</button>
        </div>
  `;
}

function getLockedGameHTML(game) {
  return `
    <div class="game-image" style="--bg: ${game.color}">
          <img
            src="${game.img}"
            alt="${game.name}"
          />
        </div>
        <div class="game-content">
          <h3>${game.name}</h3>
          <p>${game.description}</p>
          <button disabled class=" status unavailable" onclick="window.location.href='${game.url}'">–ë–ª–æ–∫</button>
        </div>
  `;
}

function renderModules(userProgress) {
  const container = document.querySelector(".modules");
  container.innerHTML = "";

  userProgress.modules.forEach((module, index) => {
    const card = document.createElement("div");
    card.classList.add("module-card");

    if (module.isCompleted()) {
      card.classList.add("completed");
      card.innerHTML = getCompletedModuleHTML(module);
    } else if (module.started) {
      card.classList.add("in-progress");
      card.innerHTML = getInProgressModuleHTML(module);
    } else {
      card.classList.add("locked");
      card.innerHTML = getLockedModuleHTML(module);
    }

    container.appendChild(card);
  });
}

function getInProgressModuleHTML(module) {
  // let url = module.url.replace(/^\/?public\//, "");
  let url = module.url;
  return `
    <div class="module-header">
      <h2 class="number-module">${module.name}</h2>
      <span class="icon"
            ><img
              src="https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fprogress.png?alt=media&token=64df3a77-e1eb-46ef-b4ce-1d2f0198b0a9"
              alt="progress"
          /></span>
    </div>
    <p class="module-description">${module.description || ""}</p>
    <div class="progress-bar orange">
      <div class="fill" style="width: ${getProgressPercent(module)}%"></div>
    </div>
    <p class="progress-text">–ü—Ä–æ–≥—Ä–µ—Å: <strong>${getProgressPercent(
      module
    )}%</strong></p>
    <button class="btn yellow" onclick="saveUserProgressAndRedirect('${url}')">–ü—Ä–æ—Ö–æ–¥–∏—Ç–∏</button>
  `;
}

function getLockedModuleHTML(module) {
  // let url = module.url.replace(/^\/?public\//, "");
  let url = module.url;

  return `
    <div class="module-header">
      <h2 class="number-module">${module.name}</h2>
      <span class="icon"
            ><img
              src="https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Flock-01.png?alt=media&token=a5424620-412b-43a6-ac66-778b25eca79c"
              alt="lock"
          /></span>
    </div>
    <p class="module-description">–í—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è —Ü–µ–π –º–æ–¥—É–ª—å –ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ</p>
    <div class="progress-bar gray">
      <div class="fill" style="width: 0%"></div>
    </div>
    <p class="progress-text">–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ</p>
    <button class="btn gray" onclick="saveUserProgressAndRedirect('${url}')">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</button>
  `;
}

function getCompletedModuleHTML(module) {
  // let url = module.url.replace(/^\/?public\//, "");
  let url = module.url;

  return `
    <div class="module-header">
      <h2 class="number-module">${module.name}</h2>
      <span class="icon">
        <img src="https://firebasestorage.googleapis.com/v0/b/noa2-8fefc.appspot.com/o/images%2Fcheck-broken.png?alt=media&token=895c675d-1e2d-4e89-9274-e6e442db2dbc" alt="check-broken" />
      </span>
    </div>
    <p class="module-description">${module.description || ""}</p>
    <div class="progress-bar green">
      <div class="fill" style="width: 100%"></div>
    </div>
    <p class="progress-text">–ü—Ä–æ–π–¥–µ–Ω–æ <strong>100%</strong></p>
    <button class="btn blue" onclick="saveUserProgressAndRedirect('${url}')">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</button>
  `;
}

function getProgressPercent(module) {
  if (module.theoryCompleted && module.test?.passed) return 100;
  if (module.theoryCompleted && module.test?.startedAt) return 60;
  if (module.theoryCompleted) return 40;
  if (module.test?.startedAt) return 20;
  return 0;
}

document.addEventListener("DOMContentLoaded", async function () {
  const toggles = document.querySelectorAll(".sidebar .toggle");
  toggles.forEach((toggle) => {
    toggle.addEventListener("click", function (e) {
      e.preventDefault();
      const next = this.nextElementSibling;
      if (next && next.classList.contains("sub-menu")) {
        next.classList.toggle("active");
        this.classList.toggle("open");
      }
    });
  });

  const path = window.location.pathname;

  const localUser = RegisterUser.fromLocalStorage();
  if (localUser) {
    setTimeout(() => {
      const hasUnreadNotifications = localUser.notifications.notifications.some(
        (notif) => notif.read === false
      );

      if (hasUnreadNotifications) {
        console.log("Unread notifications found, showing indicator.");

        const indicator = document.querySelector(".unread-indicator");
        console.log("Indicator element:", indicator);
        if (indicator) {
          indicator.style.display = "block";
        }
      }
    }, 500);
  }

  if (path.includes("main.html")) {
    if (localUser) {
      try {
        const fullUser = await RegisterUser.fetchFromDatabaseByEmail(
          localUser.email
        );
        fullUser.lastLogin = new Date().toISOString();
        fullUser.saveToLocalStorage();

        const q = query(
          collection(db, "users"),
          where("email", "==", fullUser.email)
        );
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          const userDoc = querySnapshot.docs[0];
          const uid = userDoc.id;
          await RegisterUser.ensureInitialized(uid);
        }

        generateNotificationsForUser(fullUser);
        fullUser.incrementVisits();

        userProgress = await loadProgressFromFirestore(fullUser.uid);
        renderModules(userProgress);
        renderGames(userProgress);
        renderRedactor(userProgress);

        const nameSpan = document.querySelector(".user-name");
        if (nameSpan) {
          nameSpan.textContent = `${localUser.name} ${localUser.surname}`;
        }
      } catch (error) {
        console.error("Failed to fetch user from Firestore:", error);
      }
    }
  } else if (path.includes("quiz-question.html")) {
    await handleQuizPageLoad();
  }

  setTimeout(() => {
    const localUser = RegisterUser.fromLocalStorage();
    if (localUser) {
      const nameSpan = document.querySelector(".user-name");
      if (nameSpan) {
        nameSpan.textContent = `${localUser.name} ${localUser.surname}`;
      }
    }
  }, 500);
});

window.redirectToMainPage = function () {
  window.location.href = "main.html";
};

window.redirectToQuiz = async function (moduleID) {
  const currentUser = RegisterUser.fromLocalStorage();
  console.log(moduleID);
  if (!currentUser) {
    console.error(
      "currentUser not found in localStorage. User might not be logged in or data is corrupted."
    );
    alert(
      "–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —É–≤—ñ–π—Ç–∏ –∑–Ω–æ–≤—É –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É."
    );
    return;
  }

  if (
    !currentUser.progress ||
    !(currentUser.progress instanceof UserProgress)
  ) {
    console.error(
      "currentUser.progress is missing or not a UserProgress instance:",
      currentUser.progress
    );
    alert(
      "–î–∞–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (main.html), —â–æ–± –¥–∞–Ω—ñ –æ–Ω–æ–≤–∏–ª–∏—Å—å, —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
    );
    return;
  }

  const userProgressModule = currentUser.progress.getModuleById(moduleID);

  if (userProgressModule) {
    console.log("Module found in currentUser.progress:", userProgressModule);
    try {
      let quizMode = "take";

      if (!(userProgressModule.test instanceof Test)) {
        console.warn(
          `Module ${moduleID} test was not a Test instance or was null. Re-initializing.`
        );
        userProgressModule.test = new Test();
      }

      if (
        userProgressModule.test.startedAt &&
        userProgressModule.test.finishedAt
      ) {
        console.log(
          `–¢–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è ${moduleID} –≤–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ—Ö—ñ–¥ —É —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É.`
        );
        quizMode = "review";
      } else {
        console.log(
          `–¢–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è ${moduleID} —â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ—Ö—ñ–¥ —É —Ä–µ–∂–∏–º –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è.`
        );
        userProgressModule.theoryCompleted = true;

        if (!userProgressModule.test.startedAt) {
          userProgressModule.test.start();
          console.log(`–¢–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è ${moduleID} —Ä–æ–∑–ø–æ—á–∞—Ç–æ.`);
        }
      }

      localStorage.setItem(
        "currentQuizModule",
        JSON.stringify(userProgressModule.toJSON())
      );
      localStorage.setItem("currentQuizMode", quizMode);

      currentUser.saveToLocalStorage();

      await currentUser.updateFieldsInFirestore({
        progress: currentUser.progress.toJSON(),
      });

      console.log(
        `‚úÖ –ú–æ–¥—É–ª—å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (—Ä–µ–∂–∏–º: ${quizMode}), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ quiz-question.html...`
      );
      window.location.href = "quiz-question.html";
    } catch (error) {
      console.error(
        "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥—É–ª—è —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:",
        error
      );
      alert(
        "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ —Ç–µ—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –î–µ—Ç–∞–ª—ñ: " +
          error.message
      );
    }
  } else {
    console.error(
      `Module with ID '${moduleID}' not found in currentUser.progress.`
    );
    alert(
      `–ú–æ–¥—É–ª—å –∑ ID '${moduleID}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –ø—Ä–æ–≥—Ä–µ—Å—ñ. –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É.`
    );
  }
};

function cleanRedirectUrl(redirectUrl) {
  // –í–∏–¥–∞–ª—è—î–º–æ `.html` –∑ –∫—ñ–Ω—Ü—è
  if (redirectUrl.endsWith(".html")) {
    redirectUrl = redirectUrl.slice(0, -5);
  }

  // –í–∏–¥–∞–ª—è—î–º–æ `/public/`, —è–∫—â–æ –≤–æ–Ω–æ —î –Ω–∞ –ø–æ—á–∞—Ç–∫—É
  if (redirectUrl.startsWith("/public/")) {
    redirectUrl = redirectUrl.replace("/public/", "");
  }

  return redirectUrl;
}

window.saveUserProgressAndRedirect = function (redirectUrl) {
  if (typeof userProgress !== "undefined" && userProgress !== null) {
    try {
      localStorage.setItem("userProgress", JSON.stringify(userProgress));
      console.log(
        "userProgress –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞:",
        redirectUrl
      );
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è userProgress –≤ localStorage:", error);
    }
  } else {
    console.warn(
      "–ó–º—ñ–Ω–Ω–∞ userProgress –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞. –ù–µ–º–∞—î —á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ localStorage."
    );
  }
  const currentUser = RegisterUser.fromLocalStorage();
  console.log(cleanRedirectUrl(redirectUrl));
  const userProgressModule = currentUser.progress.getModuleById(
    cleanRedirectUrl(redirectUrl)
  );

  localStorage.setItem(
    "currentQuizModule",
    JSON.stringify(userProgressModule.toJSON())
  );

  window.location.href = redirectUrl;
};

window.markTheoryCompleted = async function (moduleId) {
  window.localUser = RegisterUser.fromLocalStorage();
  const currentModuleStr = localStorage.getItem("currentQuizModule");
  if (!currentModuleStr) {
    console.warn("‚ö†Ô∏è currentQuizModule –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ localStorage.");
    return;
  }

  let parsedModuleData;
  try {
    parsedModuleData = JSON.parse(currentModuleStr);
  } catch (e) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É currentQuizModule (JSON-—Ä—è–¥–∫–∞ –º–æ–¥—É–ª—è):",
      e,
      "–†—è–¥–æ–∫:",
      currentModuleStr
    );
    return;
  }

  try {
    window.currentModule = Module.fromData(parsedModuleData);
  } catch (e) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É currentQuizModule:", e);
    return;
  }
  let progressModule = window.localUser.progress.getModuleById(
    window.currentModule.id
  );
  if (!progressModule) {
    alert(`–ú–æ–¥—É–ª—å '${moduleId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø—Ä–æ–≥—Ä–µ—Å—ñ.`);
    return;
  }

  try {
    progressModule.theoryCompleted = true;

    window.localUser.notifications.addNotification({
      message: `–¢–µ–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ${progressModule.name}`,
      type: "success",
    });

    console.log(window.localUser);

    window.localUser.saveToLocalStorage();
    await window.localUser.updateFieldsInFirestore({
      [`progress`]: window.localUser.progress.toJSON(),
      [`notifications`]: window.localUser.notifications.toJSON(),
    });

    window.location.href = "main.html";
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–æ—Ä—ñ—ó:", err);
    alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
};

window.localUser;

window.quizMode = "take";
window.correctAnswers = 0;

async function handleQuizPageLoad() {
  console.log("üìò Quiz page detected. Running quiz-question logic...");

  const storedMode = localStorage.getItem("currentQuizMode");
  if (storedMode === "review") {
    window.quizMode = "review";
    console.log("üìù –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–≤—ñ–∑—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.");
  } else {
    window.quizMode = "take";
    console.log("‚ñ∂Ô∏è –†–µ–∂–∏–º –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–≤—ñ–∑—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.");
  }

  window.localUser = RegisterUser.fromLocalStorage();
  if (!localUser) {
    console.warn(
      "‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ localStorage –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ quiz-question."
    );
    return;
  }
  console.log("üë§ currentUser from localStorage:", localUser);

  const currentModuleStr = localStorage.getItem("currentQuizModule");
  if (!currentModuleStr) {
    console.warn("‚ö†Ô∏è currentQuizModule –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ localStorage.");
    return;
  }

  let parsedModuleData;
  try {
    parsedModuleData = JSON.parse(currentModuleStr);
  } catch (e) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É currentQuizModule (JSON-—Ä—è–¥–∫–∞ –º–æ–¥—É–ª—è):",
      e,
      "–†—è–¥–æ–∫:",
      currentModuleStr
    );
    return;
  }

  try {
    window.currentModule = Module.fromData(parsedModuleData);
    console.log(
      "üì¶ currentQuizModule parsed from localStorage:",
      window.currentModule
    );
    if (!(window.currentModule.test instanceof Test)) {
      console.error(
        "FATAL: currentModule.test is not an instance of Test after parsing from localStorage!"
      );
      window.currentModule.test = new Test(window.currentModule.test || {});
    }
  } catch (e) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É currentQuizModule –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Module:",
      e
    );
    return;
  }

  window.questions = await loadQuestionsForModule(currentModule.id);
  window.questions.length = 3;
  if (window.questions.length === 0) {
    alert("–£ —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.");
    return;
  }

  if (
    window.quizMode === "review" &&
    window.currentModule &&
    window.currentModule.test &&
    window.currentModule.test.answers
  ) {
    console.log(
      "üìö –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É..."
    );
    const userAnswersMap = window.currentModule.test.answers;

    window.questions.forEach((q) => {
      const savedAnswerData = userAnswersMap[q.id];
      if (savedAnswerData) {
        q.userAnswer = savedAnswerData.userAnswer;
      }
      q.locked = true;
    });
    console.log(
      "üìö –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–ª—è —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É."
    );
  } else if (window.quizMode === "take") {
    if (
      window.currentModule &&
      window.currentModule.test &&
      window.currentModule.test.answers
    ) {
      const userAnswersMap = window.currentModule.test.answers;
      window.questions.forEach((q) => {
        const savedAnswerData = userAnswersMap[q.id];
        if (savedAnswerData && savedAnswerData.userAnswer !== undefined) {
          q.userAnswer = savedAnswerData.userAnswer;
        }
      });
    }
  }

  console.log("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", window.questions);
  window.correctAnswers = 0;
  showQuestion(0);
}

async function loadQuestionsForModule(moduleId) {
  try {
    const q = query(
      collection(db, "questions"),
      where("moduleId", "==", moduleId)
    );
    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      console.warn(`‚ö†Ô∏è –ù–µ–º–∞—î –ø–∏—Ç–∞–Ω—å –¥–ª—è –º–æ–¥—É–ª—è: ${moduleId}`);
      return [];
    }

    const questions = [];
    snapshot.forEach((doc) => {
      const data = doc.data();
      questions.push(new Question({ id: doc.id, ...data }));
    });

    return questions;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å:", error);
    return [];
  }
}

function renderQuestion(question, currentIndex, total) {
  const container = document.getElementById("quiz-container");
  container.innerHTML = "";

  const title = document.createElement("h1");
  title.textContent = `–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞–Ω—å: ${window.currentModule.description}`;

  const counter = document.createElement("p");
  counter.className = "question-count";
  counter.textContent = `–ü–∏—Ç–∞–Ω–Ω—è ${currentIndex + 1} –∑ ${total}`;

  const card = document.createElement("div");
  card.className = "question-card";

  const header = document.createElement("div");
  header.className = "question-header";
  const h2 = document.createElement("h2");
  h2.textContent = question.text;
  header.appendChild(h2);

  const answersDiv = document.createElement("div");
  answersDiv.className = "answers";

  const isEffectivelyLocked = question.locked || window.quizMode === "review";

  if (question.type === "single" || question.type === "multiple") {
    question.options.forEach((optionText, i) => {
      const answerDiv = document.createElement("div");
      answerDiv.className = `answer type-${question.type}`;
      const icon = document.createElement("span");
      icon.className = "icon";
      const text = document.createElement("span");
      text.className = "option-text";
      text.textContent = optionText;
      answerDiv.appendChild(icon);
      answerDiv.appendChild(text);

      if (question.type === "single" && question.userAnswer === optionText) {
        answerDiv.classList.add("selected");
      } else if (
        question.type === "multiple" &&
        Array.isArray(question.userAnswer) &&
        question.userAnswer.includes(optionText)
      ) {
        answerDiv.classList.add("selected");
      }

      if (!isEffectivelyLocked) {
        answerDiv.addEventListener("click", () => {
          handleAnswerClick(answerDiv, question, optionText, currentIndex);
        });
      } else {
        answerDiv.style.pointerEvents = "none";
      }
      answersDiv.appendChild(answerDiv);
    });
  } else if (question.type === "open") {
    const inputWrapper = document.createElement("div");
    inputWrapper.className = "answer-open-wrapper";
    const input = document.createElement("input");
    input.type = "text";
    input.className = "open-answer-input";
    input.placeholder = "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–¥–Ω–µ —Å–ª–æ–≤–æ)";
    input.value = question.userAnswer || "";

    if (isEffectivelyLocked) {
      input.disabled = true;
    } else {
      input.addEventListener("input", (e) => {
        window.questions[currentIndex].userAnswer = e.target.value;
      });
    }
    inputWrapper.appendChild(input);
    answersDiv.appendChild(inputWrapper);
  }

  card.appendChild(header);
  card.appendChild(answersDiv);

  const buttons = document.createElement("div");
  buttons.className = "buttons";

  const prevBtn = document.createElement("button");
  prevBtn.className = "prev";
  prevBtn.textContent = "–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–∏—Ç–∞–Ω–Ω—è";
  prevBtn.onclick = () => showPrevQuestion();
  prevBtn.disabled = currentIndex === 0;

  const nextBtn = document.createElement("button");
  nextBtn.className = "next";
  if (window.quizMode === "review") {
    nextBtn.textContent =
      currentIndex === total - 1 ? "–î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤" : "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è";
  } else {
    nextBtn.textContent =
      currentIndex === total - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç" : "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è";
  }

  nextBtn.onclick = () => {
    if (window.quizMode === "take" && !isEffectivelyLocked) {
      const currentQuestion = window.questions[currentIndex];
      if (!isAnswerGiven(currentQuestion)) {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º.");
        return;
      }
    }
    showNextQuestion();
  };

  buttons.appendChild(prevBtn);
  buttons.appendChild(nextBtn);

  container.appendChild(title);
  container.appendChild(counter);
  container.appendChild(card);
  container.appendChild(buttons);

  if (isEffectivelyLocked) {
    if (
      window.quizMode === "review" &&
      (!question.feedback || Object.keys(question.feedback).length === 0)
    ) {
      question.feedback = calculateReviewFeedback(question);
    }
    displayFeedback(question, currentIndex);
  }
}

let currentQuestionIndex = 0;
window.questions = [];

function showQuestion(index) {
  if (index >= 0 && index < window.questions.length) {
    currentQuestionIndex = index;
    renderQuestion(window.questions[index], index, window.questions.length);
  }
}

async function showNextQuestion() {
  const currentQ = window.questions[currentQuestionIndex];
  const isEffectivelyLocked = currentQ.locked || window.quizMode === "review";

  if (window.quizMode === "take" && !currentQ.locked) {
    await validateAndLockQuestion(currentQ, currentQuestionIndex);
  } else if (window.quizMode === "review" && !currentQ.locked) {
    console.warn(
      `–ü–∏—Ç–∞–Ω–Ω—è ${currentQuestionIndex} –Ω–µ –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É. –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–¥–±–µ–∫.`
    );
    if (!currentQ.feedback || Object.keys(currentQ.feedback).length === 0) {
      currentQ.feedback = calculateReviewFeedback(currentQ);
    }
    displayFeedback(currentQ, currentQuestionIndex);
    currentQ.locked = true;
  }

  if (currentQuestionIndex + 1 < window.questions.length) {
    const delay = window.quizMode === "take" && !isEffectivelyLocked ? 1000 : 0;
    setTimeout(() => {
      showQuestion(currentQuestionIndex + 1);
    }, delay);
  } else {
    const delay = window.quizMode === "take" && !isEffectivelyLocked ? 1000 : 0;
    setTimeout(() => {
      displayFinalResults();
    }, delay);
  }
}

function showPrevQuestion() {
  if (currentQuestionIndex - 1 >= 0) {
    showQuestion(currentQuestionIndex - 1);
  }
}

function handleAnswerClick(answerDiv, question, selectedOption, questionIndex) {
  if (question.locked) {
    return;
  }

  if (question.type === "single") {
    const allAnswerDivs = answerDiv.parentElement.querySelectorAll(".answer");
    allAnswerDivs.forEach((div) => div.classList.remove("selected"));
    answerDiv.classList.add("selected");
    window.questions[questionIndex].userAnswer = selectedOption;
  } else if (question.type === "multiple") {
    let currentLocalUserAnswer = window.questions[questionIndex].userAnswer;

    if (!Array.isArray(window.questions[questionIndex].userAnswer)) {
      window.questions[questionIndex].userAnswer = [];
    }
    const currentAnswers = window.questions[questionIndex].userAnswer;
    answerDiv.classList.toggle("selected");

    if (answerDiv.classList.contains("selected")) {
      if (!currentAnswers.includes(selectedOption)) {
        currentAnswers.push(selectedOption);
      }
    } else {
      const indexToRemove = currentAnswers.indexOf(selectedOption);
      if (indexToRemove > -1) {
        currentAnswers.splice(indexToRemove, 1);
      }
    }
  }
}

async function validateAndLockQuestion(question, questionIndex) {
  if (window.quizMode === "review") {
    console.log(
      "–†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É: validateAndLockQuestion –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è."
    );
    if (!question.feedback || Object.keys(question.feedback).length === 0) {
      question.feedback = calculateReviewFeedback(question);
    }
    displayFeedback(question, questionIndex);
    question.locked = true;
    return;
  }

  if (question.locked) {
    console.log(
      `–ü–∏—Ç–∞–Ω–Ω—è ${questionIndex} –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–µ. –ü—Ä–æ–ø—É—Å–∫ validateAndLockQuestion.`
    );
    displayFeedback(question, questionIndex);
    return;
  }

  question.locked = true;
  question.feedback = {};

  let isQuestionCorrectOverall;
  let pointsEarned = 0;
  let userAnswerToStore = question.userAnswer;

  if (question.type === "single") {
    let definedCorrectAnswer = null;
    if (
      Array.isArray(question.correctAnswer) &&
      question.correctAnswer.length > 0
    ) {
      definedCorrectAnswer = question.correctAnswer[0];
    } else if (typeof question.correctAnswer === "string") {
      definedCorrectAnswer = question.correctAnswer;
    }
    isQuestionCorrectOverall =
      question.userAnswer !== null &&
      typeof question.userAnswer !== "undefined" &&
      question.userAnswer === definedCorrectAnswer;
    if (isQuestionCorrectOverall) pointsEarned = question.points || 0;
    if (
      question.userAnswer !== null &&
      typeof question.userAnswer !== "undefined"
    ) {
      question.feedback[question.userAnswer] = {
        isCorrect: isQuestionCorrectOverall,
        wasSelected: true,
      };
    }
    if (!isQuestionCorrectOverall && definedCorrectAnswer !== null) {
      question.feedback[definedCorrectAnswer] = {
        isCorrect: true,
        wasSelected: false,
      };
    }
    userAnswerToStore = question.userAnswer;
  } else if (question.type === "multiple") {
    const userAnswers = question.userAnswer || [];
    const correctAnswers = Array.isArray(question.correctAnswer)
      ? question.correctAnswer
      : [];
    if (correctAnswers.length === 0) {
      isQuestionCorrectOverall = userAnswers.length === 0;
    } else {
      isQuestionCorrectOverall =
        userAnswers.length === correctAnswers.length &&
        correctAnswers.every((ca) => userAnswers.includes(ca)) &&
        userAnswers.every((ua) => correctAnswers.includes(ua));
    }
    if (isQuestionCorrectOverall) pointsEarned = question.points || 0;
    (question.options || []).forEach((option) => {
      const isThisOptionCorrect = correctAnswers.includes(option);
      const wasThisOptionSelected = userAnswers.includes(option);
      question.feedback[option] = {
        isCorrect: isThisOptionCorrect,
        wasSelected: wasThisOptionSelected,
      };
    });
    userAnswerToStore = userAnswers;
  } else if (question.type === "open") {
    let definedCorrectAnswerText = "";
    if (
      Array.isArray(question.correctAnswer) &&
      question.correctAnswer.length > 0
    ) {
      definedCorrectAnswerText = String(question.correctAnswer[0]);
    } else if (
      question.correctAnswer !== null &&
      typeof question.correctAnswer !== "undefined"
    ) {
      definedCorrectAnswerText = String(question.correctAnswer);
    }
    const userAnswerCleaned = (question.userAnswer || "").trim().toLowerCase();
    const correctAnswerCleaned = definedCorrectAnswerText.trim().toLowerCase();
    isQuestionCorrectOverall =
      userAnswerCleaned !== "" && userAnswerCleaned === correctAnswerCleaned;
    if (isQuestionCorrectOverall) pointsEarned = question.points || 0;
    question.feedback = { isCorrect: isQuestionCorrectOverall };
    userAnswerToStore = question.userAnswer;
  }

  if (isQuestionCorrectOverall) {
    window.correctAnswers++;
  }

  if (typeof isQuestionCorrectOverall === "boolean") {
    const progressModule = window.localUser.progress.getModuleById(
      window.currentModule.id
    );
    if (!progressModule || !(progressModule.test instanceof Test)) {
      console.error(
        "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: progressModule –∞–±–æ progressModule.test –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ/–Ω–µ —î Test instance –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
      );
      alert("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î–∞–Ω—ñ –º–æ–¥—É–ª—è –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ.");
      displayFeedback(question, questionIndex);
      return;
    }

    const answerPayload = {
      questionId: question.id,
      userAnswer: userAnswerToStore,
      pointsEarned: pointsEarned,
      isCorrect: isQuestionCorrectOverall,
    };

    const answerObject = new Answer(answerPayload);
    progressModule.test.addAnswer(answerObject);

    window.localUser.saveToLocalStorage();
    console.log("User progress with new answer saved to localStorage.");

    try {
      await window.localUser.updateFieldsInFirestore({
        progress: window.localUser.progress.toJSON(),
      });
      console.log("Firestore updated successfully with new answer.");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Firestore –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é:", error);
    }
  } else {
    console.warn(
      "isQuestionCorrectOverall –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:",
      question.id
    );
  }

  displayFeedback(question, questionIndex);
}

function displayFeedback(question, questionIndex) {
  const container = document.getElementById("quiz-container");
  const answerElements = container.querySelectorAll(".answers .answer");
  const inputElement = container.querySelector(".open-answer-input");

  if (question.type === "single" || question.type === "multiple") {
    answerElements.forEach((el) => {
      const optionText = el.querySelector(".option-text").textContent;
      const feedbackData = question.feedback[optionText];

      el.style.pointerEvents = "none";
      el.classList.remove("selected", "correct", "wrong");

      if (feedbackData) {
        const icon = el.querySelector(".icon");
        if (feedbackData.wasSelected) {
          el.classList.add(feedbackData.isCorrect ? "correct" : "wrong");
          icon.textContent = feedbackData.isCorrect ? "‚úî" : "‚úñ";
        } else if (feedbackData.isCorrect && question.type === "multiple") {
          el.classList.add("correct-show");
          icon.textContent = "‚úì";
        } else {
          icon.textContent = "";
        }
      }
    });
  } else if (question.type === "open" && inputElement) {
    inputElement.disabled = true;
    if (question.feedback.isCorrect) {
      inputElement.classList.add("correct");
    } else {
      inputElement.classList.add("wrong");
      const correctAnswerDisplay = document.createElement("p");
      correctAnswerDisplay.className = "correct-answer-display";
      correctAnswerDisplay.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${question.correctAnswer}`;
      inputElement.parentElement.appendChild(correctAnswerDisplay);
    }
  }
}

async function displayFinalResults() {
  const container = document.getElementById("quiz-container");
  container.innerHTML = "";

  let progressModule = null;
  if (
    window.localUser &&
    window.localUser.progress &&
    window.localUser.progress.getModuleById &&
    window.currentModule &&
    window.currentModule.id
  ) {
    progressModule = window.localUser.progress.getModuleById(
      window.currentModule.id
    );
  }

  if (!progressModule || !(progressModule.test instanceof Test)) {
    console.error(
      "Progress module –∞–±–æ test data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ/–Ω–µ —î Test instance. –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏."
    );
    alert(
      "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–¥—É–ª—è."
    );
    container.innerHTML =
      "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.</p><button onclick='window.location.href=\"main.html\"'>–ù–∞ –≥–æ–ª–æ–≤–Ω—É</button>";
    return;
  }

  if (window.quizMode === "take" && !progressModule.test.finishedAt) {
    console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –≤ —Ä–µ–∂–∏–º—ñ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è...");
    progressModule.test.finish(window.questions);
    progressModule.test.passed = true;
    progressModule.RedactorUnlocked = progressModule.test.passed;
    progressModule.miniGameUnlocked = progressModule.test.passed;
    progressModule.completedAt = new Date().toISOString();
    window.localUser.notifications.addNotification({
      message: `–¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ${progressModule.name}`,
      type: "success",
    });
    window.localUser.notifications.addNotification({
      message: `–í—ñ–¥–∫—Ä–∏—Ç–æ –Ω–æ–≤—É –≥—Ä—É —Ç–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –º–æ–¥—É–ª—è ${progressModule.name}`,
      type: "warning",
    });
    window.localUser.saveToLocalStorage();
    try {
      await window.localUser.updateFieldsInFirestore({
        progress: window.localUser.progress.toJSON(),
        [`notifications`]: window.localUser.notifications.toJSON(),
      });
      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É Firestore.");
    } catch (error) {
      console.error(
        "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Firestore –∑ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:",
        error
      );
      alert(
        "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–Ω–ª–∞–π–Ω."
      );
    }
  } else if (window.quizMode === "review") {
    console.log("–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É...");
  }

  const title = document.createElement("h1");
  title.textContent = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É";
  container.appendChild(title);

  const totalScore = progressModule.test.score || 0;
  const maxScore = progressModule.test.maxScore || 0;
  const correctAnswersCount = progressModule.test.getCorrectAnswersCount();
  const totalQuestionsInTest = window.questions.length;
  const durationMs = progressModule.test.getDurationMs();
  const formattedDuration = formatDuration(durationMs);

  const statsBlock = document.createElement("div");
  statsBlock.className = "final-stats";
  statsBlock.innerHTML = `
    <h2>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
    <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:</strong> ${correctAnswersCount} –∑ ${totalQuestionsInTest}</p>
    <p><strong>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª—ñ–≤:</strong> ${totalScore} / ${maxScore}</p>
    <p><strong>–ß–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:</strong> ${formattedDuration}</p>
  `;
  container.appendChild(statsBlock);

  const actionsDiv = document.createElement("div");
  actionsDiv.className = "final-actions";

  const backToMainButton = document.createElement("button");
  backToMainButton.textContent = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É";
  backToMainButton.className = "back-to-main-button";
  backToMainButton.onclick = () => goToNextModule(progressModule);

  actionsDiv.appendChild(backToMainButton);

  container.appendChild(actionsDiv);
}

function isAnswerGiven(question) {
  if (question.type === "single") {
    return question.userAnswer !== null && question.userAnswer !== undefined;
  }
  if (question.type === "multiple") {
    return Array.isArray(question.userAnswer) && question.userAnswer.length > 0;
  }
  if (question.type === "open") {
    return (question.userAnswer || "").trim().length > 0;
  }
  return false;
}

function formatDuration(ms) {
  const totalSeconds = Math.floor(ms / 1000);
  const minutes = Math.floor(totalSeconds / 60);
  const seconds = totalSeconds % 60;
  return `${minutes}:${seconds.toString().padStart(2, "0")}`;
}

async function goToNextModule(progressModule) {
  console.log(progressModule);
  tryStartNextModule(window.localUser.progress.modules, progressModule.id);
  await window.localUser.updateFieldsInFirestore({
    progress: window.localUser.progress.toJSON(),
  });
  window.location.href = "main.html";
}

function calculateReviewFeedback(question) {
  const feedback = {};
  if (!question) return feedback;

  if (question.type === "single") {
    const definedCorrectAnswer =
      Array.isArray(question.correctAnswer) && question.correctAnswer.length > 0
        ? question.correctAnswer[0]
        : typeof question.correctAnswer === "string"
        ? question.correctAnswer
        : null;

    const isCorrectUserChoice =
      question.userAnswer !== null &&
      typeof question.userAnswer !== "undefined" &&
      question.userAnswer === definedCorrectAnswer;

    if (
      question.userAnswer !== null &&
      typeof question.userAnswer !== "undefined"
    ) {
      feedback[question.userAnswer] = {
        isCorrect: isCorrectUserChoice,
        wasSelected: true,
      };
    }
    if (
      (!isCorrectUserChoice ||
        question.userAnswer === null ||
        typeof question.userAnswer === "undefined") &&
      definedCorrectAnswer !== null
    ) {
      if (
        !feedback[definedCorrectAnswer] ||
        !feedback[definedCorrectAnswer].wasSelected
      ) {
        feedback[definedCorrectAnswer] = {
          ...feedback[definedCorrectAnswer],
          isCorrect: true,
          wasSelected: false,
        };
      }
    }
  } else if (question.type === "multiple") {
    const userAnswers = question.userAnswer || [];
    const correctAnswers = Array.isArray(question.correctAnswer)
      ? question.correctAnswer
      : [];

    (question.options || []).forEach((option) => {
      const isThisOptionCorrect = correctAnswers.includes(option);
      const wasThisOptionSelected = userAnswers.includes(option);
      feedback[option] = {
        isCorrect: isThisOptionCorrect,
        wasSelected: wasThisOptionSelected,
      };
    });
  } else if (question.type === "open") {
    let definedCorrectAnswerText = "";
    if (
      Array.isArray(question.correctAnswer) &&
      question.correctAnswer.length > 0
    ) {
      definedCorrectAnswerText = String(question.correctAnswer[0]);
    } else if (
      question.correctAnswer !== null &&
      typeof question.correctAnswer !== "undefined"
    ) {
      definedCorrectAnswerText = String(question.correctAnswer);
    }

    const userAnswerCleaned = (question.userAnswer || "").trim().toLowerCase();
    const correctAnswerCleaned = definedCorrectAnswerText.trim().toLowerCase();
    feedback.isCorrect =
      userAnswerCleaned !== "" && userAnswerCleaned === correctAnswerCleaned;
    if (!feedback.isCorrect && correctAnswerCleaned) {
      feedback.correctAnswerText = definedCorrectAnswerText;
    }
  }
  return feedback;
}

// function generateNotificationsForUser(user) {
//   const schedule = tempoSchedule[user.temp || "normal"];
//   const registeredDate = new Date(user.registeredAt);
//   const now = new Date();
//   const notificationsToAdd = [];

//   schedule.forEach((dayOffset) => {
//     const targetDate = new Date(registeredDate);
//     targetDate.setDate(targetDate.getDate() + dayOffset);

//     // –Ø–∫—â–æ —Ü—ñ–ª—å–æ–≤–∞ –¥–∞—Ç–∞ –≤–∂–µ –Ω–∞—Å—Ç–∞–ª–∞ —ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–µ –Ω–µ —ñ—Å–Ω—É—î
//     const isDue = targetDate <= now;
//     const alreadyExists = user.notifications.notifications.some((notif) =>
//       notif.message.includes(`–î–µ–Ω—å ${dayOffset}`)
//     );

//     if (isDue && !alreadyExists) {
//       notificationsToAdd.push({
//         message: `–ü—Ä–æ–π—à–ª–æ ${dayOffset} –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.`,
//         type: "info",
//         timestamp: targetDate.toISOString(),
//         read: false,
//       });
//     }
//   });

//   if (notificationsToAdd.length > 0) {
//     notificationsToAdd.forEach((notifData) => {
//       user.notifications.addNotification(notifData);
//     });
//     user.saveToLocalStorage();
//     user.updateFieldsInFirestore({
//       notifications: user.notifications.toJSON(),
//     });
//   }
// }

function generateNotificationsForUser(user) {
  const schedule = tempoSchedule[user.temp || "normal"];
  const paceLabelMap = {
    slow: "–†–æ–∑–º—ñ—Ä–µ–Ω–∏–π —Ç–µ–º–ø üêå",
    normal: "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø üêï",
    fast: "–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–∏–π —Ç–µ–º–ø üêÜ",
  };

  if (!user.registeredAt) {
    console.warn("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –ø–æ–ª—è `registeredAt`.");
    return;
  }

  const registeredDate =
    user.registeredAt instanceof Date
      ? user.registeredAt
      : user.registeredAt.toDate
      ? user.registeredAt.toDate()
      : new Date(user.registeredAt);

  if (isNaN(registeredDate.getTime())) {
    console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", user.registeredAt);
    return;
  }

  const now = new Date();
  const notificationsToAdd = [];

  console.log(
    `‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.name} (${user.temp})`
  );
  console.log(`üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${registeredDate.toISOString()}`);
  console.log(`üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ${now.toISOString()}`);

  schedule.forEach((hourOffset) => {
    const targetDate = new Date(
      registeredDate.getTime() + hourOffset * 60 * 60 * 1000
    );

    const isDue = targetDate <= now;
    const alreadyGenerated = (user.generatedOffsets || []).includes(hourOffset);

    console.log(`üîç Offset ${hourOffset} –≥–æ–¥:`);
    console.log(`   üéØ –û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞: ${targetDate.toISOString()}`);
    console.log(`   ‚úÖ –í–∂–µ –Ω–∞—Å—Ç–∞–≤: ${isDue}`);
    console.log(`   üì¨ –í–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${alreadyGenerated}`);

    if (isDue && !alreadyGenerated) {
      const paceText = paceLabelMap[user.temp] || "–æ–±—Ä–∞–Ω–∏–π —Ç–µ–º–ø";

      notificationsToAdd.push({
        message: `–ß–µ—Ä–µ–∑ ${hourOffset} –≥–æ–¥ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (${paceText}) ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.`,
        type: "info",
        timestamp: targetDate.toISOString(),
        read: false,
      });

      user.generatedOffsets.push(hourOffset); // ‚úÖ –º–∞—Ä–∫—É—î–º–æ —è–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π
    }
  });

  if (notificationsToAdd.length > 0) {
    console.log(`üÜï –î–æ–¥–∞–Ω–æ ${notificationsToAdd.length} –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
    notificationsToAdd.forEach((notifData) => {
      user.notifications.addNotification(notifData);
    });
    user.saveToLocalStorage();
    user.updateFieldsInFirestore({
      notifications: user.notifications.toJSON(),
      generatedOffsets: user.generatedOffsets,
    });
  } else {
    console.log("üì≠ –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.");
  }
}
